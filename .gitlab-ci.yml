include:
  - project: cms-cactus/phase2/firmware/ci-templates
    ref: v0.1.7
    file: 
      - pipelines/workflow.yml
      - pipelines/vivado-build-emp.yml
      - templates/xilinx/build-emp.yml
    
.ci_templates_ref: v0.1.7

variables:
  #QUESTASIM_VERSION: "2021.1_2"
  VIVADO_VERSION: "2022.2"
  BUILD_DIR: "build"
  MTI_VCO_MODE: "64"
  HARDWARE_TEST_IMAGE_TAG: v0-3-47
  # Set PARENT_PIPELINE_ID as used in vivado-build-emp.yml in place of CI_PIPELINE_ID
  PARENT_PIPELINE_ID: ${CI_PIPELINE_ID}
  PROJECT_NAME: p2gt_finor_serenity-vu13p-2SLR
  PROJECT_DIR_PATH: finor-hdl
  PROJECT_DEPFILE: top_serenity_vu13p-so2-2SLR.d3



FinOR_2SLR:build:
  extends: .vivado_build_emp
  image: gitlab-registry.cern.ch/cms-cactus/phase2/firmware/docker/fw-builder:${BUILD_IMAGE_TAG}
  variables:
    PROJECT_NAME: p2gt_finor_serenity-vu13p-2SLR
    PROJECT_DIR_PATH: finor-hdl
    PROJECT_DEPFILE: top_serenity_vu13p-so2-2SLR.d3
    
FinOR_2SLR:build:
  extends: .vivado_build_emp
  image: gitlab-registry.cern.ch/cms-cactus/phase2/firmware/docker/fw-builder:${BUILD_IMAGE_TAG}
  variables:
    PROJECT_NAME: p2gt_finor_serenity-vu13p-3SLR
    PROJECT_DIR_PATH: finor-hdl
    PROJECT_DEPFILE: top_serenity_vu13p-so2-3SLR.d3

test_HW_2SLR:serenity:
  extends: .test_base
  image: gitlab-registry.cern.ch/p2-xware/software/serenity-toolbox/serenity-test:${HARDWARE_TEST_IMAGE_TAG}
  variables:
    HARDWARE_TEST_SERENITY_SITE: x0
    HARDWARE_TEST_PROCESSOR_ID: ${HARDWARE_TEST_SERENITY_SITE}
    HARDWARE_TEST_CONFIG_FILE: default:serenity
    HARDWARE_TEST_METRIC_REGEX: .*power.*
    SMASH_DEFAULT_CONFIG: /board.smash
    PROJECT_NAME: p2gt_finor_serenity-vu13p-2SLR
    HARDWARE_TEST_TYPE: serenity-vu13p-so2
    HARDWARE_TEST_LOCATION: b904
    HARDWARE_TEST_INPUT_CHANNELS: 0-11,36-47,48-59,68-79,80-91,116-127
    HARDWARE_TEST_INPUT_LOW_CHANNELS: 0-11,116-127
    HARDWARE_TEST_INPUT_MID_CHANNELS: 36-47,80-91
    HARDWARE_TEST_INPUT_HIGH_CHANNELS: 48-59,68-79
    HARDWARE_TEST_OUTPUT_CHANNELS: 99,52-54,40-42,4-6
    N_SLR_ALGOS: 576
    N_MONITOR_SLR: 2
    HARDWARE_TEST_CAPTURE_LENGTH: 1023
  before_script:
    - if ! [[ "$HARDWARE_TEST_SERENITY_SITE" =~ ^(x0|x1)$ ]]; then echo "HARDWARE_TEST_SERENITY_SITE variable has invalid value, ${HARDWARE_TEST_SERENITY_SITE}!   (should be x0 or x1)."; exit 1; fi
    # Install dependency: Demonstrator utilities
    - yum -y install python3
    - python3 -m pip install click
    - python3 -m pip install numpy
    - python3 -m pip install argparse
    - python3 -m pip install bitstring
    - yum -y install git
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.cern.ch/cms-cactus/phase2/demonstrator-utilities.git
    # Remove SERENITY_CONFIG variable to avoid need for Serenity YML file
    - unset SERENITY_CONFIG
    - yum -y install boost-devel pugixml-devel python36-devel cactuscore-uhal-* cactuscore-build-utils-0.2.6 tkinter
    - python3 -m pip install --upgrade click==8.0.4 click_didyoumean==0.3.0 pytest==7.0.1 python-dateutil==2.8.2 pyyaml==5.1.2 colorama==0.4.5
    - cd ${CI_PROJECT_DIR}/scripts
    # Generate pattern files
    - export N_TEST_ALGOS=$((${N_MONITOR_SLR}*${N_SLR_ALGOS} - 50))
    - python3 PatternProducer.py -i ${N_TEST_ALGOS} -a ${N_SLR_ALGOS} -m ${N_MONITOR_SLR} -T -ll ${HARDWARE_TEST_INPUT_LOW_CHANNELS} -ml ${HARDWARE_TEST_INPUT_MID_CHANNELS}   -hl ${HARDWARE_TEST_INPUT_HIGH_CHANNELS} 
    - cd ${CI_PROJECT_DIR}
    # Extract bitfile & address tables
    - ls
    - mv -v ${CI_PROJECT_DIR}/work_area/proj/${PROJECT_NAME}/package/*.tgz  .
    - tar xzfv ${PROJECT_NAME}*.tgz
    - ls -al ${PROJECT_NAME}*
    - cp -rv $(find ${PROJECT_NAME}* -name "addrtab") .
    - cp -v $(find ${PROJECT_NAME}* -name "${PROJECT_NAME}.bit") .
    - echo '<connections>' > my_connections.xml
    - echo '  <connection id="'${HARDWARE_TEST_SERENITY_SITE}'"' >> my_connections.xml
    - echo '              uri="ipbuspcie-2.0:///dev/serenity_pcie/'${HARDWARE_TEST_SERENITY_SITE}'/h2c,/dev/serenity_pcie/'${HARDWARE_TEST_SERENITY_SITE}'/c2h"' >> my_connections.xml
    - echo '              address_table="file://addrtab/top_emp.xml"/>' >> my_connections.xml
    - echo '</connections>' >> my_connections.xml
    - cat my_connections.xml
    - cp my_connections.xml ${CI_PROJECT_DIR}/scripts/
    - cp -r addrtab ${CI_PROJECT_DIR}/scripts/
  script:
    - export PATH=/opt/cactus/bin/uhal/tools:$PATH 
    - export LD_LIBRARY_PATH=/opt/cactus/lib:$LD_LIBRARY_PATH 
    - export LD_LIBRARY_PATH=/opt/cactus/lib:/opt/smash/lib:$LD_LIBRARY_PATH 
    - export PATH=/opt/cactus/bin/emp:$PATH
    - export SMASH_PATH=/opt/smash 
    - export PATH=/opt/cactus/bin/emp:/opt/cactus/bin/serenity:$PATH 
    - serenitybutler info
    - serenitybutler program ${HARDWARE_TEST_SERENITY_SITE} ${PROJECT_NAME}.bit -r
    - cd ${CI_PROJECT_DIR}/scripts/
    - empbutler -c my_connections.xml do ${HARDWARE_TEST_SERENITY_SITE} info
    - empbutler -c my_connections.xml do ${HARDWARE_TEST_SERENITY_SITE} reset internal
    # Pre-scaler test
    - empbutler -c my_connections.xml do ${HARDWARE_TEST_SERENITY_SITE} buffers rx PlayOnce -c ${HARDWARE_TEST_INPUT_CHANNELS} --inject file://${CI_PROJECT_DIR}/scripts/Pattern_files/Finor_input_pattern_prescaler_test.txt
    - empbutler -c my_connections.xml do ${HARDWARE_TEST_SERENITY_SITE} buffers tx Capture -c ${HARDWARE_TEST_OUTPUT_CHANNELS}
    - empbutler -c my_connections.xml do ${HARDWARE_TEST_SERENITY_SITE} capture --rx ${HARDWARE_TEST_INPUT_CHANNELS} --tx ${HARDWARE_TEST_OUTPUT_CHANNELS}
    - python3.6 RateChecker.py -p random -t prescaler -c my_connections.xml -ls 18 -E -ll ${HARDWARE_TEST_INPUT_LOW_CHANNELS} -ml ${HARDWARE_TEST_INPUT_MID_CHANNELS}   -hl ${HARDWARE_TEST_INPUT_HIGH_CHANNELS} 
    - mv data/tx_summary.txt out_prescaler_test.txt
    # Trigger masks test
    - empbutler -c my_connections.xml do ${HARDWARE_TEST_SERENITY_SITE} buffers rx PlayOnce -c ${HARDWARE_TEST_INPUT_CHANNELS} --inject file://${CI_PROJECT_DIR}/scripts/Pattern_files/Finor_input_pattern_trigg_test.txt
    - empbutler -c my_connections.xml do ${HARDWARE_TEST_SERENITY_SITE} buffers tx Capture -c ${HARDWARE_TEST_OUTPUT_CHANNELS}
    - empbutler -c my_connections.xml do ${HARDWARE_TEST_SERENITY_SITE} capture --rx ${HARDWARE_TEST_INPUT_CHANNELS} --tx ${HARDWARE_TEST_OUTPUT_CHANNELS}
    - python3.6 RateChecker.py -p random -t trigger_mask -c my_connections.xml -ls 18 -E -ll ${HARDWARE_TEST_INPUT_LOW_CHANNELS} -ml ${HARDWARE_TEST_INPUT_MID_CHANNELS}   -hl ${HARDWARE_TEST_INPUT_HIGH_CHANNELS}  
    # Veto masks test
    - empbutler -c my_connections.xml do ${HARDWARE_TEST_SERENITY_SITE} buffers rx PlayOnce -c ${HARDWARE_TEST_INPUT_CHANNELS} --inject file://${CI_PROJECT_DIR}/scripts/Pattern_files/Finor_input_pattern_veto_test.txt
    - empbutler -c my_connections.xml do ${HARDWARE_TEST_SERENITY_SITE} buffers tx Capture -c ${HARDWARE_TEST_OUTPUT_CHANNELS}
    - empbutler -c my_connections.xml do ${HARDWARE_TEST_SERENITY_SITE} capture --rx ${HARDWARE_TEST_INPUT_CHANNELS} --tx ${HARDWARE_TEST_OUTPUT_CHANNELS}
    - python3.6 RateChecker.py -p random -t veto_mask -c my_connections.xml -ls 18 -E -ll ${HARDWARE_TEST_INPUT_LOW_CHANNELS} -ml ${HARDWARE_TEST_INPUT_MID_CHANNELS}   -hl ${HARDWARE_TEST_INPUT_HIGH_CHANNELS}  
    # BX mask test
    - empbutler -c my_connections.xml do ${HARDWARE_TEST_SERENITY_SITE} buffers rx PlayOnce -c ${HARDWARE_TEST_INPUT_CHANNELS} --inject file://${CI_PROJECT_DIR}/scripts/Pattern_files/Finor_input_pattern_BXmask_test.txt
    - empbutler -c my_connections.xml do ${HARDWARE_TEST_SERENITY_SITE} buffers tx Capture -c ${HARDWARE_TEST_OUTPUT_CHANNELS}
    - empbutler -c my_connections.xml do ${HARDWARE_TEST_SERENITY_SITE} capture --rx ${HARDWARE_TEST_INPUT_CHANNELS} --tx ${HARDWARE_TEST_OUTPUT_CHANNELS}
    - python3.6 RateChecker.py -p random -t BXmask -c my_connections.xml -ls 18 -E -ll ${HARDWARE_TEST_INPUT_LOW_CHANNELS} -ml ${HARDWARE_TEST_INPUT_MID_CHANNELS}   -hl ${HARDWARE_TEST_INPUT_HIGH_CHANNELS} 
    # Output algobits test
    - python3.6 RateChecker.py -t algo-out -c my_connections.xml -ls 18 -ll ${HARDWARE_TEST_INPUT_LOW_CHANNELS} -ml ${HARDWARE_TEST_INPUT_MID_CHANNELS}   -hl ${HARDWARE_TEST_INPUT_HIGH_CHANNELS} 
    # Menu algo ROM test
    - python3.6 Test_ALGOROM.py 
  rules:
    - if: '$HARDWARE_TEST_TYPE =~ /^serenity/'
      when: manual
      
 test_HW_3SLR:serenity:
  image: gitlab-registry.cern.ch/p2-xware/software/serenity-toolbox/serenity-test:${HARDWARE_TEST_IMAGE_TAG}
  variables:
    HARDWARE_TEST_SERENITY_SITE: x0
    HARDWARE_TEST_PROCESSOR_ID: ${HARDWARE_TEST_SERENITY_SITE}
    HARDWARE_TEST_CONFIG_FILE: default:serenity
    HARDWARE_TEST_METRIC_REGEX: .*power.*
    SMASH_DEFAULT_CONFIG: /board.smash
    PROJECT_NAME: p2gt_finor_serenity-vu13p-3SLR
    HARDWARE_TEST_TYPE: serenity-vu13p-so2
    HARDWARE_TEST_LOCATION: b904
    HARDWARE_TEST_INPUT_CHANNELS: 0-11,36-47,48-59,68-79,80-91,116-127
    HARDWARE_TEST_INPUT_LOW_CHANNELS: 0-11,116-127
    HARDWARE_TEST_INPUT_MID_CHANNELS: 36-47,80-91
    HARDWARE_TEST_INPUT_HIGH_CHANNELS: 48-59,68-79
    HARDWARE_TEST_OUTPUT_CHANNELS: 99,52-54,40-42,4-6
    N_SLR_ALGOS: 512
    N_MONITOR_SLR: 3
    HARDWARE_TEST_CAPTURE_LENGTH: 1023
  before_script:
    - if ! [[ "$HARDWARE_TEST_SERENITY_SITE" =~ ^(x0|x1)$ ]]; then echo "HARDWARE_TEST_SERENITY_SITE variable has invalid value, ${HARDWARE_TEST_SERENITY_SITE}!   (should be x0 or x1)."; exit 1; fi
    # Install dependency: Demonstrator utilities
    - yum -y install python3
    - python3 -m pip install click
    - python3 -m pip install numpy
    - python3 -m pip install argparse
    - python3 -m pip install bitstring
    - yum -y install git
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.cern.ch/cms-cactus/phase2/demonstrator-utilities.git
    # Remove SERENITY_CONFIG variable to avoid need for Serenity YML file
    - unset SERENITY_CONFIG
    - yum -y install boost-devel pugixml-devel python36-devel cactuscore-uhal-* cactuscore-build-utils-0.2.6 tkinter
    - python3 -m pip install --upgrade click==8.0.4 click_didyoumean==0.3.0 pytest==7.0.1 python-dateutil==2.8.2 pyyaml==5.1.2 colorama==0.4.5
    - cd ${CI_PROJECT_DIR}/scripts
    # Generate pattern files
    - export N_TEST_ALGOS=$((${N_MONITOR_SLR}*${N_SLR_ALGOS} - 50))
    - python3 PatternProducer.py -i ${N_TEST_ALGOS} -a ${N_SLR_ALGOS} -m ${N_MONITOR_SLR} -T -ll ${HARDWARE_TEST_INPUT_LOW_CHANNELS} -ml ${HARDWARE_TEST_INPUT_MID_CHANNELS}   -hl ${HARDWARE_TEST_INPUT_HIGH_CHANNELS} 
    - cd ${CI_PROJECT_DIR}
    # Extract bitfile & address tables
    - ls
    - mv -v ${CI_PROJECT_DIR}/work_area/proj/${PROJECT_NAME}/package/*.tgz  .
    - tar xzfv ${PROJECT_NAME}*.tgz
    - ls -al ${PROJECT_NAME}*
    - cp -rv $(find ${PROJECT_NAME}* -name "addrtab") .
    - cp -v $(find ${PROJECT_NAME}* -name "${PROJECT_NAME}.bit") .
    - echo '<connections>' > my_connections.xml
    - echo '  <connection id="'${HARDWARE_TEST_SERENITY_SITE}'"' >> my_connections.xml
    - echo '              uri="ipbuspcie-2.0:///dev/serenity_pcie/'${HARDWARE_TEST_SERENITY_SITE}'/h2c,/dev/serenity_pcie/'${HARDWARE_TEST_SERENITY_SITE}'/c2h"' >> my_connections.xml
    - echo '              address_table="file://addrtab/top_emp.xml"/>' >> my_connections.xml
    - echo '</connections>' >> my_connections.xml
    - cat my_connections.xml
    - cp my_connections.xml ${CI_PROJECT_DIR}/scripts/
    - cp -r addrtab ${CI_PROJECT_DIR}/scripts/
  script:
    - export PATH=/opt/cactus/bin/uhal/tools:$PATH 
    - export LD_LIBRARY_PATH=/opt/cactus/lib:$LD_LIBRARY_PATH 
    - export LD_LIBRARY_PATH=/opt/cactus/lib:/opt/smash/lib:$LD_LIBRARY_PATH 
    - export PATH=/opt/cactus/bin/emp:$PATH
    - export SMASH_PATH=/opt/smash 
    - export PATH=/opt/cactus/bin/emp:/opt/cactus/bin/serenity:$PATH 
    - serenitybutler info
    - serenitybutler program ${HARDWARE_TEST_SERENITY_SITE} ${PROJECT_NAME}.bit -r
    - cd ${CI_PROJECT_DIR}/scripts/
    - empbutler -c my_connections.xml do ${HARDWARE_TEST_SERENITY_SITE} info
    - empbutler -c my_connections.xml do ${HARDWARE_TEST_SERENITY_SITE} reset internal
    # Pre-scaler test
    - empbutler -c my_connections.xml do ${HARDWARE_TEST_SERENITY_SITE} buffers rx PlayOnce -c ${HARDWARE_TEST_INPUT_CHANNELS} --inject file://${CI_PROJECT_DIR}/scripts/Pattern_files/Finor_input_pattern_prescaler_test.txt
    - empbutler -c my_connections.xml do ${HARDWARE_TEST_SERENITY_SITE} buffers tx Capture -c ${HARDWARE_TEST_OUTPUT_CHANNELS}
    - empbutler -c my_connections.xml do ${HARDWARE_TEST_SERENITY_SITE} capture --rx ${HARDWARE_TEST_INPUT_CHANNELS} --tx ${HARDWARE_TEST_OUTPUT_CHANNELS}
    - python3.6 RateChecker.py -p random -t prescaler -c my_connections.xml -ls 18 -E -ll ${HARDWARE_TEST_INPUT_LOW_CHANNELS} -ml ${HARDWARE_TEST_INPUT_MID_CHANNELS}   -hl ${HARDWARE_TEST_INPUT_HIGH_CHANNELS} 
    - mv data/tx_summary.txt out_prescaler_test.txt
    # Trigger masks test
    - empbutler -c my_connections.xml do ${HARDWARE_TEST_SERENITY_SITE} buffers rx PlayOnce -c ${HARDWARE_TEST_INPUT_CHANNELS} --inject file://${CI_PROJECT_DIR}/scripts/Pattern_files/Finor_input_pattern_trigg_test.txt
    - empbutler -c my_connections.xml do ${HARDWARE_TEST_SERENITY_SITE} buffers tx Capture -c ${HARDWARE_TEST_OUTPUT_CHANNELS}
    - empbutler -c my_connections.xml do ${HARDWARE_TEST_SERENITY_SITE} capture --rx ${HARDWARE_TEST_INPUT_CHANNELS} --tx ${HARDWARE_TEST_OUTPUT_CHANNELS}
    - python3.6 RateChecker.py -p random -t trigger_mask -c my_connections.xml -ls 18 -E -ll ${HARDWARE_TEST_INPUT_LOW_CHANNELS} -ml ${HARDWARE_TEST_INPUT_MID_CHANNELS}   -hl ${HARDWARE_TEST_INPUT_HIGH_CHANNELS}  
    # Veto masks test
    - empbutler -c my_connections.xml do ${HARDWARE_TEST_SERENITY_SITE} buffers rx PlayOnce -c ${HARDWARE_TEST_INPUT_CHANNELS} --inject file://${CI_PROJECT_DIR}/scripts/Pattern_files/Finor_input_pattern_veto_test.txt
    - empbutler -c my_connections.xml do ${HARDWARE_TEST_SERENITY_SITE} buffers tx Capture -c ${HARDWARE_TEST_OUTPUT_CHANNELS}
    - empbutler -c my_connections.xml do ${HARDWARE_TEST_SERENITY_SITE} capture --rx ${HARDWARE_TEST_INPUT_CHANNELS} --tx ${HARDWARE_TEST_OUTPUT_CHANNELS}
    - python3.6 RateChecker.py -p random -t veto_mask -c my_connections.xml -ls 18 -E -ll ${HARDWARE_TEST_INPUT_LOW_CHANNELS} -ml ${HARDWARE_TEST_INPUT_MID_CHANNELS}   -hl ${HARDWARE_TEST_INPUT_HIGH_CHANNELS}  
    # BX mask test
    - empbutler -c my_connections.xml do ${HARDWARE_TEST_SERENITY_SITE} buffers rx PlayOnce -c ${HARDWARE_TEST_INPUT_CHANNELS} --inject file://${CI_PROJECT_DIR}/scripts/Pattern_files/Finor_input_pattern_BXmask_test.txt
    - empbutler -c my_connections.xml do ${HARDWARE_TEST_SERENITY_SITE} buffers tx Capture -c ${HARDWARE_TEST_OUTPUT_CHANNELS}
    - empbutler -c my_connections.xml do ${HARDWARE_TEST_SERENITY_SITE} capture --rx ${HARDWARE_TEST_INPUT_CHANNELS} --tx ${HARDWARE_TEST_OUTPUT_CHANNELS}
    - python3.6 RateChecker.py -p random -t BXmask -c my_connections.xml -ls 18 -E -ll ${HARDWARE_TEST_INPUT_LOW_CHANNELS} -ml ${HARDWARE_TEST_INPUT_MID_CHANNELS}   -hl ${HARDWARE_TEST_INPUT_HIGH_CHANNELS} 
    # Output algobits test
    - python3.6 RateChecker.py -t algo-out -c my_connections.xml -ls 18 -ll ${HARDWARE_TEST_INPUT_LOW_CHANNELS} -ml ${HARDWARE_TEST_INPUT_MID_CHANNELS}   -hl ${HARDWARE_TEST_INPUT_HIGH_CHANNELS} 
    # Menu algo ROM test
    - python3.6 Test_ALGOROM.py 
  rules:
    - if: '$HARDWARE_TEST_TYPE =~ /^serenity/'
      when: manual


