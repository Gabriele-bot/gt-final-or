-- Address decode logic for ipbus fabric
-- 
-- This file has been AUTOGENERATED from the address table - do not hand edit
-- 
-- We assume the synthesis tool is clever enough to recognise exclusive conditions
-- in the if statement.
-- 
-- Dave Newbold, February 2011

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use ieee.numeric_std.all;

package ipbus_decode_emp_payload is

  constant IPBUS_SEL_WIDTH: positive := 3;
  subtype ipbus_sel_t is std_logic_vector(IPBUS_SEL_WIDTH - 1 downto 0);
  function ipbus_sel_emp_payload(addr : in std_logic_vector(31 downto 0)) return ipbus_sel_t;

-- START automatically generated VHDL (Tue May 16 19:18:47 2023)
  constant N_SLV_SLRN2_MONITOR: integer := 0;
  constant N_SLV_SLRN1_MONITOR: integer := 1;
  constant N_SLV_SLRN0_MONITOR: integer := 2;
  constant N_SLV_SLR_FINOR: integer := 3;
  constant N_SLAVES: integer := 4;
-- END automatically generated VHDL

    
end ipbus_decode_emp_payload;

package body ipbus_decode_emp_payload is

  function ipbus_sel_emp_payload(addr : in std_logic_vector(31 downto 0)) return ipbus_sel_t is
    variable sel: ipbus_sel_t;
  begin

-- START automatically generated VHDL (Tue May 16 19:18:47 2023)
    if    std_match(addr, "----------000-------------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLRN2_MONITOR, IPBUS_SEL_WIDTH)); -- SLRn2_monitor / base 0x00000000 / mask 0x00380000
    elsif std_match(addr, "----------001-------------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLRN1_MONITOR, IPBUS_SEL_WIDTH)); -- SLRn1_monitor / base 0x00080000 / mask 0x00380000
    elsif std_match(addr, "----------010-------------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLRN0_MONITOR, IPBUS_SEL_WIDTH)); -- SLRn0_monitor / base 0x00100000 / mask 0x00380000
    elsif std_match(addr, "----------100-------------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLR_FINOR, IPBUS_SEL_WIDTH)); -- SLR_FINOR / base 0x00200000 / mask 0x00380000
-- END automatically generated VHDL

    else
        sel := ipbus_sel_t(to_unsigned(N_SLAVES, IPBUS_SEL_WIDTH));
    end if;

    return sel;

  end function ipbus_sel_emp_payload;

end ipbus_decode_emp_payload;

